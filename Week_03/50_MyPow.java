class Solution {

    //暴力相乘n次，时间复杂度为O（N）
    //这题要写出“快速幂”法。可以从两个角度思考（位运算，分治法）
    //位运算，比如求x的9次方=（x的1*x）* （0* x平方） * （0* x的4次方） * （1* x的8次方）
    //9=1001，
    //可转换为 循环，n的最右位为1时，结果要乘以x (n & 1 == 1，res = res * x)；x=x平方；n右移1位（n >> 1）

    //分治法，比如求x的9次方= (（x的2次方）的4次方) * (x) =（(x的4次方)的2次方）* (x)=（(x的8次方)的1次方）* (x)= ((x的16次方)的0次方）* (x * x的8次方)
    //可以找到规律，当n为奇数时，x的n次方=（x的2次方）的【n/2向下取整】次方 还要再乘以 一个 x
    //            当n为偶数时，x的n次方=（x的2次方）的【n/2向下取整】次方
    //可转换为 循环，n & 1 == 1时，res = res * x；x=x平方；n右移1位

    //还要注意边界条件！Java 32位整形int范围[-2的32次方，2的32次方-1]；因此当n=-2的32次方时，-n超出int最大值，需要先把int转成long来使用

    //另外要注意循环条件，是循环 n，而不是循环x；因为每一次循环 n 会减小，而x会增加

    public double myPow(double x, int n) {
        if (x == 0d) return 0d;
        long d = n;
        if (d < 0) {
            x = 1 / x;
            d = - d;
        }
        double res = 1.0d;
        while (d > 0) {
            if ((d & 1) == 1) res = res * x;
            x = x * x;
            d = d >> 1;
        }
        return res;
    }
}